unit cCadFornecedor;

interface
uses System.Classes,
     System.SysUtils,
     Vcl.Controls,
     Vcl.ExtCtrls,
     Vcl.Dialogs,
     ZAbstractConnection,
     ZConnection,
     ZAbstractRODataset,
     ZAbstractDataset,
     ZDataset,
     System.StrUtils,
     Vcl.Imaging.jpeg,
     Vcl.Graphics;// lista de Units
type
  TFornecedor = class // Declaração do tipo de Classe
  private
      // Variaveis Privada somente dentro da classe
      ConexaoDB : TZConnection;
      F_fornecedorId : Integer; // no banco é int
      F_razaosocial : String;
      F_fantasia : String;
      F_cnpj : String;
      F_endereco : String;
      F_bairro : String;
      F_cep : String;
      F_cidade : String;
      F_estado : String;
      F_complemento : String;
      F_inscricaoestadual : String;
      F_inscricaostatus : String;
      F_telefone1 : String;
      F_telefone2 : String;
      F_situacaocadastral : String;
      F_motivoscad : String;
      F_email : String;
      F_ramo : String;
      F_observacao : String;
  public
    constructor Create(aConexao:TZConnection); //Construtor de Classe
    destructor Destroy; override; //Destroi a Classe usar o override por causa
                                  // de Sobrescrever
    function Inserir : Boolean;
    function Atualizar : Boolean;
    function Apagar : Boolean;
    function Selecionar(id:Integer) : Boolean;
      // Variaveis Publicas que pode ser trabalhadas fora da classe
  published
      // Variaveis Publicas utilizadas para propriedade da classe
      // para fornecer informações runtime
      property  codigo     : Integer   read F_fornecedorId   write F_fornecedorId;
      property  razaosocial: string    read F_razaosocial    write F_razaosocial;
      property  fantasia   : string    read F_fantasia       write F_fantasia;
      property  cnpj       : string    read F_cnpj           write F_cnpj;
      property  endereco   : string    read F_endereco       write F_endereco;
      property  bairro     : string    read F_bairro         write F_bairro;
      property  cep        : string    read F_cep            write F_cep;
      property  cidade     : string    read F_cidade         write F_cidade;
      property  estado     : string    read F_estado         write F_estado;
      property  complemento: string    read F_complemento    write F_complemento;
      property  inscricaoestadual: string    read F_inscricaoestadual  write F_inscricaoestadual;
      property  inscricaostatus: string    read F_inscricaostatus      write F_inscricaostatus;
      property  endereco   : string    read F_endereco       write F_endereco;
      property  endereco   : string    read F_endereco       write F_endereco;
      property  endereco   : string    read F_endereco       write F_endereco;
      property  endereco   : string    read F_endereco       write F_endereco;
      property  endereco   : string    read F_endereco       write F_endereco;
      property  endereco   : string    read F_endereco       write F_endereco;
      property  endereco   : string    read F_endereco       write F_endereco;

  end;

implementation
{$region 'Construtor e Destruidor'}
constructor TFornecedor.Create(aConexao:TZConnection);
begin
   ConexaoDB := aConexao;
end;
destructor TFornecedor.Destroy;
begin
  inherited;
end;
{$endregion}
{$region 'CRUD'}
function TFornecedor.Apagar : Boolean;
var Qry:TZQuery;// criar a conexão em tempo de execução
begin
   if MessageDlg('Apagar o Registro: '+#13+#13+  // pergunta se quer apagar o registro selecionado e quebra em 2 linha
                 'Codigo: '+IntToStr(F_produtoId)+#13+
                 'Nome: '+F_nome,TMsgDlgType.mtConfirmation,[TMsgDlgBtn.mbYes,TMsgDlgBtn.mbNo],0)=mrNo then begin
                   Result:= False; // caso não ele da como false e aborta
                   Abort;
   end;
   try
     Result:= True;
     Qry:=TZQuery.Create(nil);// aqui diz que cria algo mas não é de ninguém a criação da query
     Qry.Connection:=ConexaoDB;// aqui recebe a conexão
     Qry.SQL.Clear;// limpa pra evitar impureza
     Qry.SQL.Add('DELETE FROM produtos '+
                 ' WHERE produtoId =:produtoId ');
     Qry.ParamByName('produtoId').AsInteger :=F_produtoId;// aqui armazena a informação no parametro com o tipo permitido
     Try
       ConexaoDB.StartTransaction;
       Qry.ExecSQL;
       ConexaoDB.Commit;
     Except
       ConexaoDB.Rollback;
       Result := False;
     End;
   finally
     if Assigned(Qry) then
        FreeAndNil(Qry);
   end;
end;
function TFornecedor.Atualizar: Boolean;
var Qry:TZQuery;// criar a conexão em tempo de execução
begin
  try
    Result:= True;
    Qry:=TZQuery.Create(nil);// aqui diz que cria algo mas não é de ninguém a criação da query
    Qry.Connection:=ConexaoDB;// aqui recebe a conexão
    Qry.SQL.Clear;// limpa pra evitar impureza
    Qry.SQL.Add('UPDATE produtos ' +
                 ' SET nome  =:nome ' +
                 '    ,descricao  =:descricao ' +
                 '    ,custo =:custo '+
                 '    ,valor  =:valor ' +
                 '    ,qtminima  =:qtminima ' +
                 '    ,codbarras  =:codbarras ' +
                 '    ,validade  =:validade ' +
                 '    ,foto =:foto ' +
                 '    ,categoriaId  =:categoriaId ' +
                 '    ,fornecedorId =:fornecedorId ' +
                 ' WHERE produtoId =:produtoId ');// recebe os campos com o parametro :produtoId
    Qry.ParamByName('produtoId').AsInteger       :=Self.F_produtoId;// aqui armazena a informação no parametro com o tipo permitido
    Qry.ParamByName('nome').AsString             :=Self.F_nome;
    Qry.ParamByName('descricao').AsString        :=Self.F_descricao;
    Qry.ParamByName('custo').AsDouble            :=Self.F_custo;
    Qry.ParamByName('valor').AsDouble            :=Self.F_valor;
    Qry.ParamByName('qtminima').AsDouble         :=Self.F_qtminima;
    Qry.ParamByName('codbarras').AsString        :=Self.F_codbarras;
    Qry.ParamByName('validade').AsDateTime       :=Self.F_validade;
    Qry.ParamByName('categoriaId').AsInteger     :=Self.F_categoriaId;
    Qry.ParamByName('fornecedorId').AsInteger    :=Self.F_fornecedorId;
    if Self.F_foto.Empty then
      Qry.ParamByName('foto').Clear
    else
      Qry.ParamByName('foto').Assign(Self.F_foto);

     Try
       ConexaoDB.StartTransaction;
       Qry.ExecSQL;
       ConexaoDB.Commit;
     Except
       ConexaoDB.Rollback;
       Result := False;
     End;
  finally
     if Assigned(Qry) then
        FreeAndNil(Qry);
  end;
end;
function TFornecedor.Inserir: Boolean;
var Qry:TZQuery;// criar a conexão em tempo de execução
begin
  try
    Result:= True;
    Qry:=TZQuery.Create(nil);// aqui diz que cria algo mas não é de ninguém a criação da query
    Qry.Connection:=ConexaoDB;// aqui recebe a conexão
    Qry.SQL.Clear;// limpa pra evitar impureza
    Qry.SQL.Add('INSERT INTO produtos (nome, '     +
                 '                     descricao, ' +
                 '                     custo, ' +
                 '                     valor, '   +
                 '                     qtminima, '   +
                 '                     codbarras, '   +
                 '                     validade, '      +
                 '                     foto, ' +
                 '                     categoriaId, ' +
                 '                     fornecedorId )' +
                 ' VALUES            (:nome, '     +
                 '                    :descricao, ' +
                 '                    :custo, '   +
                 '                    :valor, '   +
                 '                    :qtminima, '   +
                 '                    :codbarras, '   +
                 '                    :validade, '      +
                 '                    :foto, ' +
                 '                    :categoriaId,' +
                 '                    :fornecedorId ) ' );
    Qry.ParamByName('nome').AsString             :=Self.F_nome;
    Qry.ParamByName('descricao').AsString        :=Self.F_descricao;
    Qry.ParamByName('custo').AsDouble            :=Self.F_custo;
    Qry.ParamByName('valor').AsDouble            :=Self.F_valor;
    Qry.ParamByName('qtminima').AsDouble       :=Self.F_qtminima;
    Qry.ParamByName('codbarras').AsString           :=Self.F_codbarras;
    Qry.ParamByName('validade').AsDateTime :=Self.F_validade;
    Qry.ParamByName('categoriaId').AsInteger :=Self.F_categoriaId;
    Qry.ParamByName('fornecedorId').AsInteger :=Self.F_fornecedorId;
    if Self.F_foto.Empty then
      Qry.ParamByName('foto').Clear
    else
      Qry.ParamByName('foto').Assign(Self.F_foto);
     Try
       ConexaoDB.StartTransaction;
       Qry.ExecSQL;
       ConexaoDB.Commit;
     Except
       ConexaoDB.Rollback;
       Result := False;
     End;
  finally
     if Assigned(Qry) then
        FreeAndNil(Qry);
  end;
end;
function TFornecedor.Selecionar(id: Integer): Boolean;
var Qry:TZQuery;// criar a conexão em tempo de execução
begin
  try
    Result:= True;
    Qry:=TZQuery.Create(nil);// aqui diz que cria algo mas não é de ninguém a criação da query
    Qry.Connection:=ConexaoDB;// aqui recebe a conexão
    Qry.SQL.Clear;// limpa pra evitar impureza
    Qry.SQL.Add('SELECT produtoId, '+
    '                   nome,  '    +
                 '      descricao, ' +
                 '      custo, ' +
                 '      valor, '   +
                 '      qtminima, '   +
                 '      codbarras, '   +
                 '      validade, '      +
                 '      foto, ' +
                 '      categoriaId, ' +
                 '      fornecedorId ' +
    ' FROM produtos '+
    ' WHERE produtoId =:produtoId');// recebe os campos com o parametro :produtoId
    Qry.ParamByName('produtoId').AsInteger:=id;// aqui armazena a informação no parametro que pega do id la encima do selecionar
    try
      Qry.Open;// tenta abrir a conexão
      Self.F_produtoId := Qry.FieldByName('produtoId').AsInteger;// pega o id do campo(interface) e atribui a query com o campo categoriaid e com o tipo em inteiro
      Self.F_nome      := Qry.FieldByName('nome').AsString;
      Self.F_descricao := Qry.FieldByName('descricao').AsString;
      Self.F_custo     := Qry.FieldByName('custo').AsFloat;
      Self.F_valor     := Qry.FieldByName('valor').AsFloat;
      Self.F_qtminima:= Qry.FieldByName('qtminima').AsFloat;
      Self.F_codbarras := Qry.FieldByName('codbarras').AsString;
      Self.F_validade  := Qry.FieldByName('validade').AsDateTime;
      Self.F_foto.Assign(Qry.FieldByName('foto'));
      Self.F_categoriaId := Qry.FieldByName('categoriaId').AsInteger;
      Self.F_fornecedorId := Qry.FieldByName('fornecedorId').AsInteger;
    Except
      Result:= False; // se não der vai retornar false, vai dar erro
    end;
  finally
     if Assigned(Qry) then // destroi a query da memoria e limpa
        FreeAndNil(Qry);
     end;
  end;
{$endregion}
end.
implementation
end.
