unit cVerificarEstoque;

interface

uses
  SysUtils,
  Classes,
  ZConnection,
  ZDataset,
  System.Notification,
  ExtCtrls;

type
  TVerificarEstoque = class(TObject)
  private
    Qry: TZConnection;
    CentralNotificacao: TNotificationCenter;
    Tempo: TTimer;
    procedure VerificarEstoqueBaixo(Sender: TObject);
  public
    constructor Create(AConexao: TZConnection; ACentralNotificacao: TNotificationCenter; AInterval: Integer);
    destructor Destroy; override;
    procedure Iniciar;
    procedure Parar;
  end;

implementation


constructor TVerificarEstoque.Create(AConexao: TZConnection; ACentralNotificacao: TNotificationCenter; AInterval: Integer);
begin
  inherited Create;
  Qry := AConexao;
  CentralNotificacao := ACentralNotificacao;

  // Configurar o timer
  Tempo := TTimer.Create(nil);
  Tempo.Interval := AInterval;
  Tempo.OnTimer := VerificarEstoqueBaixo;
end;

destructor TVerificarEstoque.Destroy;
begin
  Tempo.Free;
  inherited Destroy;
end;

procedure TVerificarEstoque.Iniciar;
begin
  Tempo.Enabled := True;
end;

procedure TVerificarEstoque.Parar;
begin
  Tempo.Enabled := False;
end;

procedure TVerificarEstoque.VerificarEstoqueBaixo(Sender: TObject);
var
  Query: TZQuery;
  Notification: TNotification;
begin
  Query := TZQuery.Create(nil);
  try
    Query.Connection := Qry;
    Query.SQL.Text := 'SELECT produtoId, nome, quantidade FROM produtos WHERE quantidade <= 10';
    Query.Open;

    while not Query.EOF do
    begin
      Notification := TNotification.Create;
      try
        Notification.Title := 'Produto com Estoque Baixo';
        Notification.AlertBody := Format('Produto: %s (ID: %d) está com quantidade baixa (%d unidades).',
                                         [Query.FieldByName('nome').AsString,
                                          Query.FieldByName('produtoId').AsInteger,
                                          Query.FieldByName('quantidade').AsInteger]);
        CentralNotificacao.PresentNotification(Notification);
      finally
        Notification.Free;
      end;
      Query.Next;
    end;
  finally
    Query.Free;
  end;
end;

end.
