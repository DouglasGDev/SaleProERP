unit cCadCategoria;

interface

uses System.Classes,
     System.SysUtils,
     Vcl.Controls,
     Vcl.ExtCtrls,
     Vcl.Dialogs,
     ZAbstractConnection,
     ZConnection,
     ZAbstractRODataset,
     ZAbstractDataset,
     ZDataset;// lista de Units
type
  TCategoria = class // Declaração do tipo de Classe
  private
      // Variaveis Privada somente dentro da classe
      ConexaoDB : TZConnection;
      F_categoriaId : Integer; // no banco é int
      F_descricao : String;
    function getCodigo: Integer;
    function getDescricao: String;
    procedure setCodigo(const Value: Integer);
    procedure setDescricao(const Value: String);    // no banco é varchar
  public
    constructor Create(aConexao:TZConnection); //Construtor de Classe
    destructor Destroy; override; //Destroi a Classe usar o override por causa
                                  // de Sobrescrever
    function Inserir : Boolean;
    function Atualizar : Boolean;
    function Apagar(id:Integer) : Boolean;
    function Selecionar(id:Integer) : Boolean;
      // Variaveis Publicas que pode ser trabalhadas fora da classe
  published
      // Variaveis Publicas utilizadas para propriedade da classe
      // para fornecer informações runtime
      property  codigo : Integer read getCodigo write setCodigo;
      property  descricao : String read getDescricao write setDescricao;
  end;

implementation
   // corpo da classe

{ TCategoria }

{$region 'Construtor e destruidor'}
constructor TCategoria.Create(aConexao:TZConnection);
begin
   ConexaoDB := aConexao;
end;

destructor TCategoria.Destroy;
begin
  inherited;
end;

{$endregion}

{$region 'CRUD'}
function TCategoria.Apagar(id:Integer) : Boolean;
begin
   if MessageDlg('Apagar o Registro: '+#13+#13+  // pergunta se quer apagar o registro selecionado
                 'Codigo: '+IntToStr(F_categoriaId)+#13+
                 'Descrição: '+F_descricao,TMsgDlgType.mtConfirmation,[TMsgDlgBtn.mbYes,TMsgDlgBtn.mbNo],0)=mrNo then begin
                   Result:= False; // caso não ele da como false e aborta
                   Abort;
                 end;

end;

function TCategoria.Atualizar: Boolean;
var Qry:TZQuery;// criar a conexão em tempo de execução
begin
  try
    Result:= True;
    Qry:=TZQuery.Create(nil);// aqui diz que cria algo mas não é de ninguém a criação da query
    Qry.Connection:=ConexaoDB;// aqui recebe a conexão
    Qry.SQL.Clear;// limpa pra evitar impureza
    Qry.SQL.Add('UPDATE categorias ' +
                 ' SET descricao =:descricao ' +
                 ' WHERE categoriaId =:categoriaId ');// recebe os campos com o parametro :descricao
    Qry.ParamByName('categoriaId').AsInteger:=Self.F_categoriaId;// aqui armazena a informação no parametro com o tipo permitido
    Qry.ParamByName('descricao').AsString:=Self.F_descricao;
    try
      Qry.ExecSQL;// tenta executar a gravação
    Except
      Result:= False; // se não der vai retornar false, vai dar erro
    end;
  finally
     if Assigned(Qry) then
        FreeAndNil(Qry);
  end;
end;

function TCategoria.Inserir: Boolean;
var Qry:TZQuery;// criar a conexão em tempo de execução
begin
  try
    Result:= True;
    Qry:=TZQuery.Create(nil);// aqui diz que cria algo mas não é de ninguém a criação da query
    Qry.Connection:=ConexaoDB;// aqui recebe a conexão
    Qry.SQL.Clear;// limpa pra evitar impureza
    Qry.SQL.Add('INSERT INTO categorias (descricao) values (:descricao)');// recebe os campos com o parametro :descricao
    Qry.ParamByName('descricao').AsString:=Self.F_descricao;// aqui armazena a informação no parametro com o tipo permitido
    try
      Qry.ExecSQL;// tenta executar a gravação
    Except
      Result:= False; // se não der vai retornar false, vai dar erro
    end;
  finally
     if Assigned(Qry) then
        FreeAndNil(Qry);
  end;

end;

function TCategoria.Selecionar(id: Integer): Boolean;
var Qry:TZQuery;// criar a conexão em tempo de execução
begin
  try
    Result:= True;
    Qry:=TZQuery.Create(nil);// aqui diz que cria algo mas não é de ninguém a criação da query
    Qry.Connection:=ConexaoDB;// aqui recebe a conexão
    Qry.SQL.Clear;// limpa pra evitar impureza
    Qry.SQL.Add('SELECT categoriaId, '+
    'descricao '+
    'FROM categorias'+
    ' WHERE categoriaId =:categoriaId');// recebe os campos com o parametro :categoriaId
    Qry.ParamByName('categoriaId').AsInteger:=id;// aqui armazena a informação no parametro que pega do id la encima do selecionar
    try
      Qry.Open;// tenta abrir a conexão
      Self.F_categoriaId := Qry.FieldByName('categoriaId').AsInteger;// pega o id do campo(interface) e atribui a query com o campo categoriaid e com o tipo em inteiro
      Self.F_descricao   := Qry.FieldByName('descricao').AsString;// mesma coisa aqui, com o tipo em string
    Except
      Result:= False; // se não der vai retornar false, vai dar erro
    end;
  finally
     if Assigned(Qry) then // destroi a query da memoria e limpa
        FreeAndNil(Qry);
     end;
  end;

{$endregion}

{$region 'Gets'}
function TCategoria.getCodigo: Integer;
begin
    Result := Self.F_categoriaId; // pra buscar
end;

function TCategoria.getDescricao: String;
begin
    Result := Self.F_descricao; // pra buscar
end;
{$endregion}

{$region 'Sets'}
procedure TCategoria.setCodigo(const Value: Integer);
begin
    Self.F_categoriaId := Value; // pra modificar
end;

procedure TCategoria.setDescricao(const Value: String);
begin
   Self.F_descricao := Value;  // pra modificar
end;
{$endregion}
end.