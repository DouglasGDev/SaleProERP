unit uProVenda;
interface
uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, uTelaHeranca, Data.DB,
  ZAbstractRODataset, ZAbstractDataset, ZDataset, Vcl.DBCtrls, Vcl.Grids,
  Vcl.DBGrids, Vcl.StdCtrls, Vcl.Buttons, Vcl.Mask, Vcl.ExtCtrls, Vcl.ComCtrls, uDTMConexao, uDTMVenda,
  RxToolEdit, RxCurrEdit, uEnum, cProVenda, uRelVenda, uConsultaCliente,
  uConsultaProduto, uCadCliente, uCadProduto, uCalculadora, cProOrcamento,
  uConsultaOrcamento;
type
  TfrmProVenda = class(TfrmTelaHeranca)
    QryListagemvendaId: TZIntegerField;
    QryListagemclienteId: TZIntegerField;
    QryListagemnome: TZUnicodeStringField;
    QryListagemdataVenda: TZDateTimeField;
    edtVendaId: TLabeledEdit;
    lblCliente: TLabel;
    lkpCliente: TDBLookupComboBox;
    lblDataVenda: TLabel;
    edtDataVenda: TDateEdit;
    Panel1: TPanel;
    Panel2: TPanel;
    Panel3: TPanel;
    Panel4: TPanel;
    dbGridItensVenda: TDBGrid;
    lkpProduto: TDBLookupComboBox;
    lblProduto: TLabel;
    lblValorUnitario: TLabel;
    edtValorUnitario: TCurrencyEdit;
    edtQuantidade: TCurrencyEdit;
    lblQuantidade: TLabel;
    edtTotalProduto: TCurrencyEdit;
    lblTotalProduto: TLabel;
    btnApagarItem: TBitBtn;
    QryListagemtotalVenda: TZFMTBCDField;
    btnIncluirClientes: TSpeedButton;
    btnPesquisarCliente: TSpeedButton;
    btnIncluirProdutos: TSpeedButton;
    btnPesquisarProdutos: TSpeedButton;
    pnlProduto: TPanel;
    imgProduto: TImage;
    pnlBodyText: TPanel;
    lblValorProduto: TLabel;
    lblNomeProduto: TLabel;
    lblPix: TLabel;
    lblCredito: TLabel;
    lblDebito: TLabel;
    edtPix: TCurrencyEdit;
    edtCredito: TCurrencyEdit;
    edtDebito: TCurrencyEdit;
    lblValorVenda: TLabel;
    edtValorTotal: TCurrencyEdit;
    lblValorPagar: TLabel;
    edtValorPagar: TCurrencyEdit;
    btnAdicionarItem: TBitBtn;
    Label1: TLabel;
    edtDinheiro: TCurrencyEdit;
    btnCalculadora: TBitBtn;
    chkOrcamento: TCheckBox;
    btnGravarOrcamento: TBitBtn;
    btnBuscarOrcamento: TBitBtn;
    edtOrcamentoId: TLabeledEdit;
    procedure FormCreate(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure FormKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure btnAlterarClick(Sender: TObject);
    procedure btnNovoClick(Sender: TObject);
    procedure btnAdicionarItemClick(Sender: TObject);
    procedure lkpProdutoExit(Sender: TObject);
    procedure edtQuantidadeExit(Sender: TObject);
    procedure edtQuantidadeEnter(Sender: TObject);
    procedure btnCancelarClick(Sender: TObject);
    procedure btnGravarClick(Sender: TObject);
    procedure btnApagarItemClick(Sender: TObject);
    procedure dbGridItensVendaDblClick(Sender: TObject);
    procedure btnPesquisarClienteClick(Sender: TObject);
    procedure btnPesquisarProdutosClick(Sender: TObject);
    procedure btnIncluirClientesClick(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure btnIncluirProdutosClick(Sender: TObject);
    procedure edtDataVendaExit(Sender: TObject);
    procedure edtPixExit(Sender: TObject);
    procedure edtCreditoExit(Sender: TObject);
    procedure edtDebitoExit(Sender: TObject);
    procedure edtDinheiroExit(Sender: TObject);
    procedure btnCalculadoraClick(Sender: TObject);
    procedure btnGravarOrcamentoClick(Sender: TObject);
    procedure btnBuscarOrcamentoClick(Sender: TObject);
  private
    { Private declarations }
    dtmVenda : TdtmVenda;
    oVenda   : TVenda;
    oOrcamento : TOrcamento;
    function Apagar:Boolean; override;
    function Gravar(EstadoDoCadastro:TEstadoDoCadastro):Boolean; override;
    function TotalizarProduto(valorUnitario, Quantidade: Double): Double;
    procedure LimparComponenteItem;
    procedure LimparCds;
    procedure CarregarRegistroSelecionado;
    function TotalizarVenda: Double;
    function TotalPagar: Double;
    procedure CarregarFotoProdutoSelecionado;
    function GravarOrcamento(EstadoOrcamento: TEstadoOrcamento): Boolean;
    procedure AtualizarUI(Sender: TObject);
  public
    { Public declarations }
  end;
var
  frmProVenda: TfrmProVenda;
  FotoStream: TMemoryStream;
  FotoField: TBlobField;
implementation
{$R *.dfm}

uses UPrincipal, cFuncao;
{$region 'override'}

function TfrmProVenda.Apagar: Boolean;
begin
    if oVenda.Selecionar(QryListagem.FieldByName('vendaId').AsInteger, dtmVenda.cdsItensVenda) then begin
       Result := oVenda.Apagar;
    end;
end;


function TfrmProVenda.Gravar(EstadoDoCadastro: TEstadoDoCadastro): boolean;
begin
  Result := False;
  if edtVendaId.Text <> EmptyStr then
    oVenda.VendaId := StrToInt(edtVendaId.Text)
  else
    oVenda.VendaId := 0;

  oVenda.ClienteId := lkpCliente.KeyValue;
  oVenda.DataVenda := edtDataVenda.Date;
  oVenda.TotalVenda := edtValorTotal.Value;
  oVenda.Pix := edtPix.Value; // Incluir o valor de Pix
  oVenda.Credito := edtCredito.Value; // Incluir o valor de Crédito
  oVenda.Debito := edtDebito.Value; // Incluir o valor de Débito
  oVenda.Dinheiro := edtDinheiro.Value; // incluir o valor de dinheiro

  if (EstadoDoCadastro=ecInserir) then begin
     oVenda.VendaId:=oVenda.Inserir(dtmVenda.cdsItensVenda);
  end
  else if (EstadoDoCadastro=ecAlterar) then
     oVenda.Atualizar(dtmVenda.cdsItensVenda);

     frmRelVenda:=TfrmRelVenda.Create(self);
     frmRelVenda.QryVenda.Close;
     frmRelVenda.QryVenda.ParamByName('VendaId').AsInteger:= oVenda.VendaId;
     frmRelVenda.QryVenda.Open;

     frmRelVenda.QryVendaItens.Close;
     frmRelVenda.QryVendaItens.ParamByName('VendaId').AsInteger:= oVenda.VendaId;
     frmRelVenda.QryVendaItens.Open;


     frmRelVenda.Relatorio.PreviewModal;
     frmRelVenda.Release;

     Result:=true;
end;


procedure TfrmProVenda.lkpProdutoExit(Sender: TObject);
begin
  inherited;
  if TDBLookupComboBox(Sender).KeyValue<>Null then begin
    edtValorUnitario.Value := dtmVenda.QryProdutos.FieldByName('valor').AsFloat;
    edtQuantidade.Value := 1;
    edtTotalProduto.Value := TotalizarProduto(edtValorUnitario.Value, edtQuantidade.Value);
  end;
end;
{$endregion}

procedure TfrmProVenda.btnAdicionarItemClick(Sender: TObject);

begin
  inherited;

  FotoField := dtmVenda.QryProdutos.FieldByName('foto') as TBlobField;
  if not FotoField.IsNull then
  begin
    FotoStream := TMemoryStream.Create;
    try
      FotoField.SaveToStream(FotoStream);
      FotoStream.Position := 0;
      imgProduto.Picture.Bitmap.LoadFromStream(FotoStream);
    finally
      FotoStream.Free;
    end;
  end
  else
  begin
    imgProduto.Picture := nil;
  end;


  if lkpProduto.KeyValue = Null then
  begin
    MessageDlg('Produto é um campo Obrigatório', TMsgDlgType.mtInformation, [TMsgDlgBtn.mbOK], 0);
    lkpProduto.SetFocus;
    Abort;
  end;

  if edtValorUnitario.Value <= 0 then
  begin
    MessageDlg('Valor Unitário não pode ser Zero', TMsgDlgType.mtInformation, [TMsgDlgBtn.mbOK], 0);
    edtValorUnitario.SetFocus;
    Abort;
  end;

  if edtQuantidade.Value <= 0 then
  begin
    MessageDlg('Quantidade não pode ser Zero', TMsgDlgType.mtInformation, [TMsgDlgBtn.mbOK], 0);
    edtQuantidade.SetFocus;
    Abort;
  end;

  if dtmVenda.cdsItensVenda.Locate('produtoId', lkpProduto.KeyValue, []) then
  begin
    // Produto já foi selecionado, atualizar quantidade e valor total do produto
    dtmVenda.cdsItensVenda.Edit;
    dtmVenda.cdsItensVenda.FieldByName('quantidade').AsFloat :=
      dtmVenda.cdsItensVenda.FieldByName('quantidade').AsFloat + edtQuantidade.Value;
    dtmVenda.cdsItensVenda.FieldByName('valorTotalProduto').AsFloat :=
      dtmVenda.cdsItensVenda.FieldByName('quantidade').AsFloat * dtmVenda.cdsItensVenda.FieldByName('valorUnitario').AsFloat;
    dtmVenda.cdsItensVenda.Post;
  end
  else
  begin
    // Novo produto, adicionar ao dataset
    edtTotalProduto.Value := TotalizarProduto(edtValorUnitario.Value, edtQuantidade.Value);
    dtmVenda.cdsItensVenda.Append;
    dtmVenda.cdsItensVenda.FieldByName('produtoId').AsString := lkpProduto.KeyValue;
    dtmVenda.cdsItensVenda.FieldByName('nomeProduto').AsString := dtmVenda.QryProdutos.FieldByName('nome').AsString;
    dtmVenda.cdsItensVenda.FieldByName('quantidade').AsFloat := edtQuantidade.Value;
    dtmVenda.cdsItensVenda.FieldByName('valorUnitario').AsFloat := edtValorUnitario.Value;
    dtmVenda.cdsItensVenda.FieldByName('valorTotalProduto').AsFloat := edtTotalProduto.Value;
    dtmVenda.cdsItensVenda.Post;
  end;

  edtValorTotal.Value := TotalizarVenda; // Atualiza o valor total da venda
  edtValorPagar.Value := TotalPagar; // atualiza o valor a pagar
  lblNomeProduto.Caption := 'Produto :' + dtmVenda.QryProdutos.FieldByName('nome').AsString;
  lblValorProduto.Caption := 'Valor Unitário : R$ ' + dtmVenda.QryProdutos.FieldByName('valor').AsString;
  LimparComponenteItem;
  lkpProduto.SetFocus;

end;

procedure TfrmProVenda.LimparComponenteItem;
begin
  lkpProduto.KeyValue := null;    // pra limpar os campos depois de terem sido selecionados
  edtQuantidade.Value := 0;
  edtValorUnitario.Value := 0;
  edtTotalProduto.Value := 0;
  edtValorPagar.Value := 0;
end;

function TfrmProVenda.TotalizarProduto(valorUnitario, Quantidade:Double):Double;
begin
  Result := valorUnitario * Quantidade;
end;
procedure TfrmProVenda.LimparCds;
begin
  dtmVenda.cdsItensVenda.First;
  while not dtmVenda.cdsItensVenda.Eof do
    dtmVenda.cdsItensVenda.Delete;
end;
procedure TfrmProVenda.btnAlterarClick(Sender: TObject); //alterar
begin
chkOrcamento.Checked := False;
  if oVenda.Selecionar(QryListagem.FieldByName('vendaId').AsInteger, dtmVenda.cdsItensVenda) then begin
     edtVendaId.Text      := IntToStr(oVenda.VendaId);
     lkpCliente.KeyValue  := oVenda.ClienteId;
     edtPix.Value         := oVenda.Pix;
     edtCredito.Value     := oVenda.Credito;
     edtDebito.Value      := oVenda.Debito;
     edtDinheiro.Value    := oVenda.Dinheiro;
     edtDataVenda.Date    := oVenda.DataVenda;
     edtValorTotal.Value  := oVenda.TotalVenda;
  end
  else begin
    btnCancelar.Click;
    Abort;
  end;
  inherited;
end;
procedure TfrmProVenda.btnApagarItemClick(Sender: TObject);
begin
  inherited;
  if lkpProduto.KeyValue=Null then begin     // verifica se tem produto selecionado e se não tiver vai dar esse aviso
    MessageDlg('Selecione o Produto a ser excluído' , TMsgDlgType.mtInformation, [TMsgDlgBtn.mbOK], 0);
    dbgridItensVenda.SetFocus;
    abort;
  end;
  if dtmVenda.cdsItensVenda.Locate('produtoId', lkpProduto.KeyValue, []) then begin  // localiza o item selecionado a ser removido da lista de produtos comprados, deleta e depois limpa o item de lá
     dtmVenda.cdsItensVenda.Delete;
     edtValorTotal.Value := TotalizarVenda;  // atualiza o valor no total da venda
     edtValorPagar.Value := TotalPagar; // atualiza o valor a pagar
     LimparComponenteItem;
  end;
end;


procedure TfrmProVenda.btnBuscarOrcamentoClick(Sender: TObject);
var
  Qry: TZQuery;
begin
  inherited;
  try
    frmConsultaOrcamento := TfrmConsultaOrcamento.Create(Self);

    if not VarIsNull(lkpCliente.KeyValue) then
      frmConsultaOrcamento.aIniciarPesquisaId := lkpCliente.KeyValue;

    frmConsultaOrcamento.ShowModal;

    if not VarIsEmpty(frmConsultaOrcamento.aRetornarIdSelecionado) then  //Não Atribuido
 begin
      lkpCliente.KeyValue := frmConsultaOrcamento.aRetornarIdSelecionado;
      edtOrcamentoId.Text := frmConsultaOrcamento.aRetornarIdOrcamentoSelecionado;
      try
        dtmVenda.cdsItensVenda.DisableControls;
        dtmVenda.cdsItensVenda.First;
        while not dtmVenda.cdsItensVenda.Eof do
          dtmVenda.cdsItensVenda.Delete;

        Qry := TZQuery.Create(nil);
        try
          Qry.Connection := dtmPrincipal.ConexaoDB;
          Qry.SQL.Clear;
          Qry.SQL.Text := 'SELECT itens_orcamento.produtoId, ' +
                          '       produtos.Nome, ' +
                          '       itens_orcamento.ValorUnitario, ' +
                          '       itens_orcamento.Quantidade ' + // Removido itens_orcamento.TotalProduto
                          '       itens_orcamento.valorTotalProduto' +
                          '  FROM itens_orcamento  ' +
                          '       INNER JOIN produtos On produtos.produtoId = itens_orcamento.produtoId ' +
                          ' WHERE itens_orcamento.orcamentoId = :orcamentoId';
          Qry.ParamByName('orcamentoId').AsInteger := frmConsultaOrcamento.aRetornarIdOrcamentoSelecionado;
          Qry.Open;

          // Pega da Query e Coloca no ClientDataSet
          while not Qry.Eof do
          begin
            dtmVenda.cdsItensVenda.Append;
            dtmVenda.cdsItensVenda.FieldByName('produtoId').AsInteger := Qry.FieldByName('produtoId').AsInteger;
            dtmVenda.cdsItensVenda.FieldByName('nomeProduto').AsString := Qry.FieldByName('Nome').AsString;
            dtmVenda.cdsItensVenda.FieldByName('valorUnitario').AsFloat := Qry.FieldByName('ValorUnitario').AsFloat;
            dtmVenda.cdsItensVenda.FieldByName('quantidade').AsFloat := Qry.FieldByName('Quantidade').AsFloat;
            dtmVenda.cdsItensVenda.FieldByName('valorTotalProduto').AsFloat := Qry.FieldByName('valorTotalProduto').AsFloat;
            dtmVenda.cdsItensVenda.Post;
            Qry.Next;
          end;
        finally
          Qry.Free;
        end;

        dtmVenda.cdsItensVenda.First;
      except
        on E: Exception do
        begin
          ShowMessage('Erro ao buscar itens do orçamento: ' + E.Message);
          dtmVenda.cdsItensVenda.Cancel;
          raise;
        end;
      end;
    end;
  finally
    frmConsultaOrcamento.Release;
    dtmVenda.cdsItensVenda.EnableControls;
  end;
end;




procedure TfrmProVenda.btnCalculadoraClick(Sender: TObject);
begin
  inherited;
   TFuncao.CriarForm(TfrmCalculadora, oUsuarioLogado, DtmPrincipal.ConexaoDB);
end;

procedure TfrmProVenda.btnCancelarClick(Sender: TObject);
begin
  inherited;
   LimparCds;
end;

function TfrmProVenda.GravarOrcamento(EstadoOrcamento: TEstadoOrcamento): Boolean;
begin
  Result := False;
  if edtVendaId.Text <> EmptyStr then
    oOrcamento.OrcamentoId := StrToInt(edtVendaId.Text)
  else
    oOrcamento.OrcamentoId := 0;

  oOrcamento.ClienteId := lkpCliente.KeyValue;
  oOrcamento.DataOrcamento := edtDataVenda.Date;
  oOrcamento.TotalOrcamento := edtValorTotal.Value;

  if EstadoOrcamento = ecNovoOrcamento then
  begin
    oOrcamento.OrcamentoId := oOrcamento.Inserir(dtmVenda.cdsItensVenda);
    if oOrcamento.OrcamentoId > 0 then
      Result := True;
  end
  else if EstadoOrcamento = ecAlterarOrcamento then
  begin
    if oOrcamento.Atualizar(dtmVenda.cdsItensVenda) then
      Result := True;
  end;
end;



procedure TfrmProVenda.btnGravarClick(Sender: TObject);
var
  Resposta: Integer;
begin
  if TotalPagar <> 0.00 then
  begin
    MessageDlg('Algum lançamento ou forma de pagamento incorreto, por favor verificar', TMsgDlgType.mtWarning, [mbOK], 0);
    abort;
  end
  else if TotalPagar = 0.00 then
  Resposta := MessageDlg('Proceder com o pagamento ?', TMsgDlgType.mtWarning, [TMsgDlgBtn.mbYes, TMsgDlgBtn.mbNo], 0);
  case Resposta of
    mrYes:
      begin
        // Código para proceder com o pagamento
        ShowMessage('Pagamento processado.');
      end;
    mrNo:
      begin
        // Código para cancelar o pagamento
        ShowMessage('Pagamento cancelado.');
        abort;
      end;
  end;
  inherited;

   LimparCds;
end;


procedure TfrmProVenda.btnGravarOrcamentoClick(Sender: TObject);
begin
  // Certifique-se de que todos os valores de pagamento estejam zerados para um orçamento
  if (edtPix.Value <> 0) or (edtCredito.Value <> 0) or (edtDebito.Value <> 0) or (edtDinheiro.Value <> 0) then
  begin
    MessageDlg('Orçamento não deve ter valores de pagamento.', TMsgDlgType.mtWarning, [mbOK], 0);
    Exit;
  end;
  // Salvar o orçamento
  if GravarOrcamento(ecNovoOrcamento) then
    ShowMessage('Orçamento gravado com sucesso.');
  LimparCds;
end;

procedure TfrmProVenda.btnIncluirClientesClick(Sender: TObject);
begin
  TFuncao.CriarForm(TfrmCadCliente, oUsuarioLogado, DtmPrincipal.ConexaoDB);
  dtmVenda.QryCliente.Refresh;
end;

procedure TfrmProVenda.btnIncluirProdutosClick(Sender: TObject);
begin
  inherited;
  TFuncao.CriarForm(TfrmCadProduto, oUsuarioLogado, DtmPrincipal.ConexaoDB);
  dtmVenda.QryProdutos.Refresh;
end;

procedure TfrmProVenda.btnNovoClick(Sender: TObject);
begin
  inherited;
   edtDataVenda.Date := Date;
   lkpCliente.SetFocus;
   lblNomeProduto.Caption := 'Produto :';
   lblValorProduto.Caption := 'Valor :';
   chkOrcamento.Checked := False;
   LimparCds;
end;
procedure TfrmProVenda.btnPesquisarClienteClick(Sender: TObject);
begin
  inherited;
   TRY
  frmConsultaCliente:=TfrmConsultaCliente.Create(Self);

  if lkpCliente.KeyValue<>Null then
     frmConsultaCliente.aIniciarPesquisaId:=lkpCliente.KeyValue;

  frmConsultaCliente.ShowModal;

  if frmConsultaCliente.aRetornarIdSelecionado<>Unassigned then  //Não Atribuido
     lkpCliente.KeyValue:=frmConsultaCliente.aRetornarIdSelecionado;
  FINALLY
       frmConsultaCliente.Release;
  END;
end;



procedure TfrmProVenda.btnPesquisarProdutosClick(Sender: TObject);
begin
  inherited;
   TRY
  frmConsultaProduto:=TfrmConsultaProduto.Create(Self);

  if lkpProduto.KeyValue<>Null then
     frmConsultaProduto.aIniciarPesquisaId:=lkpProduto.KeyValue;

  frmConsultaProduto.ShowModal;

  if frmConsultaProduto.aRetornarIdSelecionado<>Unassigned then  //Não Atribuido
     lkpProduto.KeyValue:=frmConsultaProduto.aRetornarIdSelecionado;
  FINALLY
       frmConsultaProduto.Release;
  END;
end;



procedure TfrmProVenda.edtCreditoExit(Sender: TObject);
begin
  inherited;
   edtValorPagar.Value := TotalPagar; // atualiza o valor a pagar
end;

procedure TfrmProVenda.edtDataVendaExit(Sender: TObject);
begin
  inherited;
  if not chkOrcamento.Checked then
  begin
    if edtDataVenda.Date <> Date then
    begin
      if edtDataVenda.Date < Date then
        MessageDlg('Data inferior à atual', TMsgDlgType.mtWarning, [TMsgDlgBtn.mbOK], 0)
      else
        MessageDlg('Data superior à atual', TMsgDlgType.mtWarning, [TMsgDlgBtn.mbOK], 0);

      edtDataVenda.SetFocus;
    end;
  end;
end;


procedure TfrmProVenda.edtDebitoExit(Sender: TObject);
begin
  inherited;
   edtValorPagar.Value := TotalPagar; // atualiza o valor a pagar
end;

procedure TfrmProVenda.edtDinheiroExit(Sender: TObject);
begin
  inherited;
   edtValorPagar.Value := TotalPagar; // atualiza o valor a pagar
end;

procedure TfrmProVenda.edtPixExit(Sender: TObject);
begin
  inherited;
   edtValorPagar.Value := TotalPagar; // atualiza o valor a pagar
end;

procedure TfrmProVenda.edtQuantidadeEnter(Sender: TObject);
begin
  inherited;
  edtTotalProduto.Value := TotalizarProduto(edtValorUnitario.Value, edtQuantidade.Value);
end;
procedure TfrmProVenda.edtQuantidadeExit(Sender: TObject);
begin
  inherited;
  edtTotalProduto.Value := TotalizarProduto(edtValorUnitario.Value, edtQuantidade.Value);
end;
procedure TfrmProVenda.FormClose(Sender: TObject; var Action: TCloseAction);
begin
  inherited;
  if Assigned(dtmVenda) then
    FreeAndNil(dtmVenda);
  if Assigned(oVenda) then
    FreeAndNil(oVenda);
  if Assigned(oOrcamento) then
    FreeAndNil(oOrcamento);
end;

procedure TfrmProVenda.AtualizarUI(Sender: TObject);
begin
  if chkOrcamento.Checked then
  begin
    edtPix.Enabled := False;
    edtCredito.Enabled := False;
    edtDebito.Enabled := False;
    edtDinheiro.Enabled := False;
    btnGravar.Enabled := False;
    btnGravarOrcamento.Enabled := True;

    edtPix.Value := 0;
    edtCredito.Value := 0;
    edtDebito.Value := 0;
    edtDinheiro.Value := 0;
  end
  else
  begin
    edtPix.Enabled := True;
    edtCredito.Enabled := True;
    edtDebito.Enabled := True;
    edtDinheiro.Enabled := True;
    btnGravar.Enabled := True;
    btnGravarOrcamento.Enabled := False;
  end;
end;

procedure TfrmProVenda.FormCreate(Sender: TObject);
begin
  inherited;
   dtmVenda := TdtmVenda.Create(Self);
   oVenda:=TVenda.Create(dtmPrincipal.ConexaoDB);
   oOrcamento := TOrcamento.Create(dtmPrincipal.ConexaoDB);
   chkOrcamento.Checked := False;
   IndiceAtual :=  'nome';

     // Vincular o evento OnClick do checkbox ao método AtualizarUI
  chkOrcamento.OnClick := AtualizarUI;
  // Atualizar a UI com o estado inicial do checkbox
  AtualizarUI(chkOrcamento);

end;
procedure TfrmProVenda.FormKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
  inherited;
   BloqueiaCTRL_DEL_DBGrid(Key,Shift);
end;
procedure TfrmProVenda.FormShow(Sender: TObject);
begin
  QryListagem.Open;
  inherited;
end;

procedure TfrmProVenda.CarregarRegistroSelecionado;
begin
  lkpProduto.KeyValue := dtmVenda.cdsItensVenda.FieldByName('produtoId').AsString;
  edtQuantidade.Value := dtmVenda.cdsItensVenda.FieldByName('quantidade').AsFloat;
  edtValorUnitario.Value := dtmVenda.cdsItensVenda.FieldByName('valorUnitario').AsFloat;
  edtTotalProduto.Value := dtmVenda.cdsItensVenda.FieldByName('valorTotalProduto').AsFloat;
  //if oVenda.VendaId = dtmVenda.cdsItensVenda.FieldByName('vendaId').Value then
  //begin
  edtPix.Value := oVenda.Pix;
  edtCredito.Value := oVenda.Credito;
  edtDebito.Value := oVenda.Debito;
  edtDinheiro.Value := oVenda.Dinheiro;
  //end;
end;
procedure TfrmProVenda.CarregarFotoProdutoSelecionado;
var
  FotoStream: TMemoryStream;
  FotoField: TBlobField;
begin
  // Verifica se há uma linha selecionada
  if not dtmVenda.cdsItensVenda.IsEmpty then
  begin
    // Obtém o campo blob que contém a foto do produto
    FotoField := dtmVenda.QryProdutos.FieldByName('foto') as TBlobField;

    // Verifica se o campo blob não está vazio
    if not FotoField.IsNull then
    begin
      // Cria um stream de memória para armazenar a foto
      FotoStream := TMemoryStream.Create;
      try
        // Salva a foto do campo blob no stream de memória
        FotoField.SaveToStream(FotoStream);
        // Coloca o stream na posição inicial
        FotoStream.Position := 0;
        // Carrega a foto no componente TImage
        imgProduto.Picture.Bitmap.LoadFromStream(FotoStream);
      finally
        // Libera o stream de memória
        FotoStream.Free;
      end;
    end
    else
    begin
      // Se o campo blob estiver vazio, limpa a imagem
      imgProduto.Picture := nil;
    end;
  end;
end;
procedure TfrmProVenda.dbGridItensVendaDblClick(Sender: TObject);
begin
  inherited;
   CarregarRegistroSelecionado;
   CarregarFotoProdutoSelecionado;
end;
function TfrmProVenda.TotalizarVenda:Double;
begin
  result := 0;
  dtmVenda.cdsItensVenda.First;
  while not dtmVenda.cdsItensVenda.Eof do begin
    result := result + dtmVenda.cdsItensVenda.FieldByName('valorTotalProduto').AsFloat;
    dtmVenda.cdsItensVenda.Next;
  end;
end;

function TfrmProVenda.TotalPagar: Double;
var
  ValorPix, ValorCredito, ValorDebito, ValorDinheiro: Double;
begin
  // Convertendo os valores das edições para Float, garantindo que não haja erro de conversão
  ValorPix := StrToFloatDef(edtPix.Text, 0);
  ValorCredito := StrToFloatDef(edtCredito.Text, 0);
  ValorDebito := StrToFloatDef(edtDebito.Text, 0);
  ValorDinheiro := StrToFloatDef(edtDinheiro.Text, 0);

  // Calculando o valor total a pagar
  Result := TotalizarVenda - (ValorPix + ValorCredito + ValorDebito + ValorDinheiro);
end;
end.
